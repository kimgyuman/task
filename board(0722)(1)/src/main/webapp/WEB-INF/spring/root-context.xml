<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="driverClassName" value="org.mariadb.jdbc.Driver" />
		<property name="url" value="jdbc:mariadb://127.0.0.1:3306/counsel_info" />
		<property name="username" value="root" />
		<property name="password" value="0000" />
	</bean>
		
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		 <property name="dataSource" ref="dataSource" />
		 <property name="configLocation" value="classpath:/mybatis-config.xml" />
		 <property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml" />
		</bean>
		
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
		
	<context:component-scan base-package="com.board.domain" />
	<context:component-scan base-package="com.board.dao" />
	<context:component-scan base-package="com.board.service" />
		
		
<!-- 쿼츠 관련 -->
				
<!-- Spring Quartz Start -->
	<!-- Job 1 -->
	<bean id="deleteBoardJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <property name="targetObject" ref="quartzService" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드를 지정합니다. -->
	    <property name="targetMethod" value="deleteBoard" />
	    <!-- 동시 실행을 방지합니다. -->
	    <property name="concurrent" value="false" />
	</bean>
	<!-- Trigger 1 -->
	<bean id="deleteBoardJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="deleteBoardJob" />
	    <!-- Trigger를 사용하여 3초 간격으로 실행되도록 지정했습니다. 매일 8시  (0 0 8 * * ?)  -->
	    <property name="cronExpression" value="0 0 8 * * ?" />
	    <!--<property name="cronExpression" value="0/3 * * * * ?" />-->
	</bean>

	<!-- Job 2 -->
	<bean id="boardMaskingJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <property name="targetObject" ref="quartzService" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드를 지정합니다. -->
	    <property name="targetMethod" value="boardMasking" />
	    <!-- 동시 실행을 방지합니다. -->
	    <property name="concurrent" value="false" />
	</bean>
	<!-- Trigger 2 -->
	<bean id="boardMaskingJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="boardMaskingJob" />
	    <!-- Trigger를 사용하여 3분 간격으로 실행되도록 지정했습니다. (0 0/3 * * * ?)-->
	    <property name="cronExpression" value="0 0/3 * * * ?" />
	    <!--<property name="cronExpression" value="0/3 * * * * ?" />-->
	</bean>

    
	<!-- Scheduler -->
	<bean id="testJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
			<list><ref bean="deleteBoardJobTrigger" />
				  <ref bean="boardMaskingJobTrigger" />
		    </list>
	    </property>
	</bean>
<!-- Spring Quartz End -->
		
		
		
		
		
		
		
		
		
	<job id="demoJob"
		xmlns="http://www.springframework.org/schema/batch">
		<description> Spring batch demo </description>
		<step id="demoStep01" next="demoStep02">
			<tasklet ref="demo01Tasklet" />
		</step>
		<step id="demoStep02">
			<tasklet ref="demo02Tasklet" />
		</step>
	</job>

	<bean id="demo01Tasklet"
		class="com.board.tasklet.Demo01Tasklet" scope="step" />
		<!-- scope {step: 각 스텝마다 스텝에 종속된 고유한 빈을 만든다, 
					prototype: 빈을 reference (참조) 할 때마다 새로운 빈을 반환한다, 
					singleton: 배치 job이 생성될 때 하나의 고유한 빈을 만든다 }  -->
	<bean id="demo02Tasklet"
		class="com.board.tasklet.Demo02Tasklet" scope="step" />
		
	<!-- 스프링 배치의 metadata를 담당하는 빈. -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
	</bean>
	
	<!-- 스프링 배치 job을 실행하는 빈. -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
	
	<!-- 스프링 배치 job을 테스트할 때 쓰는 유틸리티.
	<bean id="jobLauncherTestUtils"
		class="org.springframework.batch.test.JobLauncherTestUtils" /> -->	
		
		
		
		
		
		
		
		
		
</beans>
